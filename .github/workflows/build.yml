name: Infrastructure Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
      - 'argocd/**'
      - 'k8s-manifests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
      - 'argocd/**'
      - 'k8s-manifests/**'
  workflow_dispatch:

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Validate - Stage
        run: |
          cd terraform/environments/stage
          terraform init -backend=false
          terraform validate

      - name: Terraform Validate - Prod
        run: |
          cd terraform/environments/prod
          terraform init -backend=false
          terraform validate

      - name: Terraform Module Validation
        run: |
          for module in terraform/modules/*; do
            if [ -d "$module" ]; then
              echo "Validating module: $(basename $module)"
              cd "$module"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

  yaml-validation:
    name: YAML Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows/ argocd/ k8s-manifests/
          config_file: .yamllint.yml
        continue-on-error: true

  kubernetes-validation:
    name: Kubernetes Manifest Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: |
          find k8s-manifests/ -name "*.yaml" -o -name "*.yml" | xargs kubeval
        continue-on-error: true

      - name: Validate ArgoCD manifests
        run: |
          find argocd/ -name "*.yaml" -o -name "*.yml" | xargs kubeval --ignore-missing-schemas
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan on infrastructure
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required documentation
        run: |
          echo "üìö Checking infrastructure documentation..."
          
          # Check if main documentation files exist
          files=(
            "README.md"
            "terraform/README.md"
            "terraform/INFRASTRUCTURE.md"
            "CI-CD-README.md"
            "ProjectStack.md"
            "ProjectSpec.md"
          )
          
          missing_files=()
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -eq 0 ]; then
            echo "‚úÖ All required documentation files are present"
          else
            echo "‚ùå Missing documentation files:"
            printf '  - %s\n' "${missing_files[@]}"
            exit 1
          fi

      - name: Check for TODO items in infrastructure
        run: |
          echo "üîç Checking for TODO items..."
          todo_count=$(grep -r "TODO\|FIXME\|XXX" terraform/ argocd/ k8s-manifests/ --exclude-dir=.git || true | wc -l)
          
          if [ "$todo_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $todo_count TODO/FIXME items in infrastructure:"
            grep -r "TODO\|FIXME\|XXX" terraform/ argocd/ k8s-manifests/ --exclude-dir=.git || true
            echo ""
            echo "Consider resolving these before deployment to production."
          else
            echo "‚úÖ No TODO items found"
          fi

  cost-estimation:
    name: Infrastructure Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON for staging
        run: |
          cd terraform/environments/stage
          infracost breakdown --path . --format json --out-file /tmp/infracost-stage.json
        continue-on-error: true

      - name: Generate Infracost JSON for production
        run: |
          cd terraform/environments/prod
          infracost breakdown --path . --format json --out-file /tmp/infracost-prod.json
        continue-on-error: true

      - name: Post Infracost comment
        run: |
          infracost comment github --path "/tmp/infracost-*.json" \
            --repo $GITHUB_REPOSITORY \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --pull-request ${{ github.event.number }} \
            --behavior update
        continue-on-error: true 