name: Deploy

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_sync:
        description: 'Force ArgoCD sync'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: 1.5.0

jobs:
  get-infrastructure-info:
    name: Get Infrastructure Info
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.terraform-output.outputs.cluster_name }}
      cluster_location: ${{ steps.terraform-output.outputs.cluster_location }}
      cluster_endpoint: ${{ steps.terraform-output.outputs.cluster_endpoint }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Get Terraform outputs
        id: terraform-output
        working-directory: terraform/environments/${{ steps.env.outputs.environment == 'production' && 'prod' || 'stage' }}
        run: |
          terraform init
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster_location=$(terraform output -raw cluster_location)" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [get-infrastructure-info]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ needs.get-infrastructure-info.outputs.cluster_name }} \
            --region ${{ needs.get-infrastructure-info.outputs.cluster_location }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in k8s manifests
          IMAGE_TAG="${{ github.sha }}"
          sed -i "s|image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bro-ai:.*|image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bro-ai:${IMAGE_TAG}|g" k8s-manifests/staging/*.yaml

      - name: Commit updated manifests
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s-manifests/staging/
          git diff --staged --quiet || git commit -m "Update staging image to ${{ github.sha }}"
          git push

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Sync ArgoCD application
        run: |
          argocd app sync bro-ai-staging
          argocd app wait bro-ai-staging --timeout 600

      - name: Check deployment status
        run: |
          kubectl get pods -n staging
          kubectl get services -n staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [get-infrastructure-info]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ needs.get-infrastructure-info.outputs.cluster_name }} \
            --region ${{ needs.get-infrastructure-info.outputs.cluster_location }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in k8s manifests
          IMAGE_TAG="${{ github.sha }}"
          sed -i "s|image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bro-ai:.*|image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bro-ai:${IMAGE_TAG}|g" k8s-manifests/production/*.yaml

      - name: Commit updated manifests
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s-manifests/production/
          git diff --staged --quiet || git commit -m "Update production image to ${{ github.sha }}"
          git push

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Sync ArgoCD application
        run: |
          argocd app sync bro-ai-production
          argocd app wait bro-ai-production --timeout 600

      - name: Check deployment status
        run: |
          kubectl get pods -n production
          kubectl get services -n production

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running production smoke tests..."
          kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f http://bro-ai-service.production.svc.cluster.local/health

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Deployment successful! :rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'Deployment failed! :x:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 